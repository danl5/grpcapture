// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tlsDataBuffer struct{ Data [4096]uint8 }

type tlsTlsDataEvent struct {
	Pid       uint32
	Tid       uint32
	Timestamp uint64
	DataLen   uint32
	IsRead    uint8
	Pad       [3]uint8
	Comm      [16]int8
	SslPtr    uint64
}

// loadTls returns the embedded CollectionSpec for tls.
func loadTls() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TlsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tls: %w", err)
	}

	return spec, err
}

// loadTlsObjects loads tls and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tlsObjects
//	*tlsPrograms
//	*tlsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTlsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTls()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tlsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tlsSpecs struct {
	tlsProgramSpecs
	tlsMapSpecs
	tlsVariableSpecs
}

// tlsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tlsProgramSpecs struct {
	ProbeEntrySslRead   *ebpf.ProgramSpec `ebpf:"probe_entry_ssl_read"`
	ProbeEntrySslWrite  *ebpf.ProgramSpec `ebpf:"probe_entry_ssl_write"`
	ProbeReturnSslRead  *ebpf.ProgramSpec `ebpf:"probe_return_ssl_read"`
	ProbeReturnSslWrite *ebpf.ProgramSpec `ebpf:"probe_return_ssl_write"`
}

// tlsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tlsMapSpecs struct {
	DataBufferMap  *ebpf.MapSpec `ebpf:"data_buffer_map"`
	EventBufferMap *ebpf.MapSpec `ebpf:"event_buffer_map"`
	SslReadArgs    *ebpf.MapSpec `ebpf:"ssl_read_args"`
	SslWriteArgs   *ebpf.MapSpec `ebpf:"ssl_write_args"`
	TargetPids     *ebpf.MapSpec `ebpf:"target_pids"`
	TlsEvents      *ebpf.MapSpec `ebpf:"tls_events"`
}

// tlsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tlsVariableSpecs struct {
}

// tlsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTlsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tlsObjects struct {
	tlsPrograms
	tlsMaps
	tlsVariables
}

func (o *tlsObjects) Close() error {
	return _TlsClose(
		&o.tlsPrograms,
		&o.tlsMaps,
	)
}

// tlsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTlsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tlsMaps struct {
	DataBufferMap  *ebpf.Map `ebpf:"data_buffer_map"`
	EventBufferMap *ebpf.Map `ebpf:"event_buffer_map"`
	SslReadArgs    *ebpf.Map `ebpf:"ssl_read_args"`
	SslWriteArgs   *ebpf.Map `ebpf:"ssl_write_args"`
	TargetPids     *ebpf.Map `ebpf:"target_pids"`
	TlsEvents      *ebpf.Map `ebpf:"tls_events"`
}

func (m *tlsMaps) Close() error {
	return _TlsClose(
		m.DataBufferMap,
		m.EventBufferMap,
		m.SslReadArgs,
		m.SslWriteArgs,
		m.TargetPids,
		m.TlsEvents,
	)
}

// tlsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTlsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tlsVariables struct {
}

// tlsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTlsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tlsPrograms struct {
	ProbeEntrySslRead   *ebpf.Program `ebpf:"probe_entry_ssl_read"`
	ProbeEntrySslWrite  *ebpf.Program `ebpf:"probe_entry_ssl_write"`
	ProbeReturnSslRead  *ebpf.Program `ebpf:"probe_return_ssl_read"`
	ProbeReturnSslWrite *ebpf.Program `ebpf:"probe_return_ssl_write"`
}

func (p *tlsPrograms) Close() error {
	return _TlsClose(
		p.ProbeEntrySslRead,
		p.ProbeEntrySslWrite,
		p.ProbeReturnSslRead,
		p.ProbeReturnSslWrite,
	)
}

func _TlsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tls_x86_bpfel.o
var _TlsBytes []byte
